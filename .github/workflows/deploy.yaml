name: 'Deploy Game ðŸŽ®'

on:
  workflow_dispatch:
    inputs:
      godot-version:
        type: string
        description: 'Godot version used on project'
        default: "4.3"

env:
  BUTLER_FILE: butler-file
  ITCH_USER: nyeptun
  GAME_ID: lightkeepers
  GODOT_TEMPLATES_PATH: ~/.local/share/godot/export_templates/${{ inputs.godot-version }}.stable
  GODOT_TEMPLATES_URL: https://downloads.tuxfamily.org/godotengine/${{ inputs.godot-version }}/Godot_v${{ inputs.godot-version }}-stable_export_templates.tpz
  GODOT_DOWNLOAD_URL: https://github.com/godotengine/godot/releases/download/${{ inputs.godot-version }}-stable/Godot_v${{ inputs.godot-version }}-stable_linux.x86_64.zip

jobs:
  setup:
    name: 'Setup Godot project'
    runs-on: ubuntu-latest
    outputs:
      BUILD_NUMBER: ${{ steps.get_version.outputs.BUILD_NUMBER }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      
      - id: 'get_version'
        name: 'Get build number from a direct reading of project.godot file'
        run: |
          GET_VERSION="$(cat project.godot | grep 'config/version' | grep -oP '"\K[^"\047]+(?=["\047])')"
          echo "BUILD_NUMBER=$GET_VERSION" >> "$GITHUB_OUTPUT"
          echo "Game version: $GET_VERSION"
      
      - name: 'Download Godot'
        run: |
          wget --quiet ${{ env.GODOT_DOWNLOAD_URL }} && unzip Godot_v${{ inputs.godot-version }}-stable_linux.x86_64.zip
          mv Godot_v${{ inputs.godot-version }}-stable_linux.x86_64 godot.x86_64 && chmod +x godot.x86_64
      
      - name: Godot check
        run: ./godot.x86_64 --version
      
      - name: Godot initialize
        run: ./godot.x86_64 -e --headless --quit --verbose
      
      - name: 'Download build templates'
        run: |
          mkdir -p exports/web exports/windows exports/linux ${{ env.GODOT_TEMPLATES_PATH }}
          curl -o ./godot_templates.zip ${{ env.GODOT_TEMPLATES_URL }} && unzip ./godot_templates.zip 
          mv templates/* ${{ env.GODOT_TEMPLATES_PATH }}
      
      - id: 'run_export'
        name: Run export
        run: |
          ./godot.x86_64 -q --headless --export-release "Lightkeepers_Web" exports/web/lightkeepers.html
          ./godot.x86_64 -q --headless --export-release "Lightkeepers_Windows" exports/windows/Lightkeepers.exe
          ./godot.x86_64 -q --headless --export-release "Lightkeepers_Linux" exports/linux/Lightkeepers.x86_64

      - name: Patch .html file
        run:  mv exports/web/*.html exports/web/index.html
      
      - name: Upload Web export artifact
        uses: actions/upload-artifact@v4
        with:
          name: exp_web
          path: exports/web
          retention-days: 1
          if-no-files-found: error
      
      - name: Upload Windows export artifact
        uses: actions/upload-artifact@v4
        with:
          name: exp_windows
          path: exports/windows
          retention-days: 1
          if-no-files-found: error
      
      - name: Upload Linux export artifact
        uses: actions/upload-artifact@v4
        with:
          name: exp_linux
          path: exports/linux
          retention-days: 1
          if-no-files-found: error

  upload_web:
    name: 'Upload to web'
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        shell: bash
    env:
      EXP_ARTIFACT: "exp_web"
      OS_TAG: "web"
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
    
    steps:
      - name: Download latest Butler
        run: curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default

      - name: Uncompact butler
        shell: bash
        run: unzip butler.zip && chmod +x butler

      - name: Butler check
        shell: bash
        run: ./butler -V
        
      - name: Butler auth
        run: ./butler login
      
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.EXP_ARTIFACT }}
          path: export

      - name: 'upload_web'
        run: ./butler push export ${{ env.ITCH_USER }}/${{ env.GAME_ID }}:${{ env.OS_TAG }} --userversion ${{ needs.setup.outputs.BUILD_NUMBER }}
  
  upload_linux:
    name: 'Upload linux executable'
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        shell: bash
    env:
      EXP_ARTIFACT: "exp_linux"
      OS_TAG: "linux"
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
    
    steps:
      - name: Download latest Butler
        run: curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
      
      - name: Uncompact butler
        shell: bash
        run: unzip butler.zip && chmod +x butler

      - name: Butler check
        shell: bash
        run: ./butler -V
        
      - name: Butler auth
        run: ./butler login

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.EXP_ARTIFACT }}
          path: export

      - id: 'upload_linux'
        run: ./butler push export ${{ env.ITCH_USER }}/${{ env.GAME_ID }}:${{ env.OS_TAG }} --userversion ${{ needs.setup.outputs.BUILD_NUMBER }}

  upload_windows:
    name: 'Upload windows executable'
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        shell: bash
    env:
      EXP_ARTIFACT: "exp_windows"
      OS_TAG: "win64"
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
    
    steps:
      - name: Download latest Butler
        run: curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
      
      - name: Uncompact butler
        shell: bash
        run: unzip butler.zip && chmod +x butler

      - name: Butler check
        shell: bash
        run: ./butler -V
        
      - name: Butler auth
        run: ./butler login
      
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.EXP_ARTIFACT }}
          path: export
      
      - id: 'upload_windows'
        run: ./butler push export ${{ env.ITCH_USER }}/${{ env.GAME_ID }}:${{ env.OS_TAG }} --userversion ${{ needs.setup.outputs.BUILD_NUMBER }}
